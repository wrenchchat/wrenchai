# Docusaurus Portfolio Playbook

# Workflow Types:
# - standard: Sequential step executed by a single agent
# - work_in_parallel: Multiple operations executed concurrently
# - self_feedback_loop: Agent iteratively improves its own work
# - partner_feedback_loop: Two agents collaborating in a review cycle
# - process: Structured sequence with conditional branching
# - versus: Two agents working competitively on same task
# - handoff: Specialized task delegation based on conditions

- step_id: metadata
  type: standard
  description: "Docusaurus Portfolio Playbook Configuration"
  metadata:
    name: docusaurus_portfolio_playbook
    description: "Build a public-facing Docusaurus portfolio with six sections"
    sections:
      - "GitHub projects (AI/ML in Python)"
      - "Useful scripts (Python, gcloud, SQL, LookML, JS/TS, Git)"
      - "Technical articles"
      - "Frontend examples (NextJS, React)"
      - "Analytics Pipeline"
      - "Data Science (Plotly + Dash, PyMC, PyTorch, SciPy)"
    tools:
      - web_search
      - secrets_manager
      - memory
      - code_generation
      - code_execution
      - github_tool
      - github_mcp
      - puppeteer
      - browser_tools
      - bayesian_update
      - data_analysis
      - test_tool
      - database_tool
      - monitoring_tool
    agents:
      - SuperAgent
      - GithubJourneyAgent
      - CodeGeneratorAgent
      - CodifierAgent
      - UXDesignerAgent
      - InspectorAgent
      - TestEngineerAgent
      - UATAgent
      - DBA
    agent_llms:
      SuperAgent: "claude-3.7-sonnet"
      GithubJourneyAgent: "gpt-4o"
      CodeGeneratorAgent: "claude-3.7-sonnet"
      CodifierAgent: "claude-3.7-sonnet"
      UXDesignerAgent: "gpt-4o"
      InspectorAgent: "claude-3.7-sonnet"
      TestEngineerAgent: "claude-3.7-sonnet"
      UATAgent: "gemini-2.5-flash"
      DBA: "claude-3.7-sonnet"

- step_id: analyze_source_materials
  type: standard
  description: "Analyze source materials and create a comprehensive project plan"
  agent: SuperAgent
  operation: "analyze_and_plan"
  next: setup_repository

- step_id: setup_repository
  type: standard
  description: "Create and configure GitHub repository for Docusaurus site"
  agent: GithubJourneyAgent
  operation: "setup_docusaurus_repo"
  tools:
    - github_tool
    - github_mcp
  parameters:
    repo_name: "portfolio"
    description: "Personal portfolio site built with Docusaurus"
    private: false
    auto_init: true
  next: design_ui

- step_id: design_ui
  type: partner_feedback_loop
  description: "Design UI and site structure with feedback cycles"
  agents:
    creator: UXDesignerAgent
    reviewer: InspectorAgent
  operations:
    - role: creator
      name: "design_site_structure"
    - role: reviewer
      name: "review_design"
    - role: creator
      name: "refine_design"
  iterations: 2
  next: setup_docusaurus

- step_id: setup_docusaurus
  type: standard
  description: "Set up and configure Docusaurus environment"
  agent: CodeGeneratorAgent
  operation: "setup_docusaurus_environment"
  tools:
    - code_execution
    - code_generation
  next: generate_content

- step_id: generate_content
  type: work_in_parallel
  description: "Generate content for all six sections concurrently"
  agents:
    - CodeGeneratorAgent:generate_github_projects
    - CodeGeneratorAgent:generate_useful_scripts
    - CodeGeneratorAgent:generate_technical_articles
    - CodeGeneratorAgent:generate_frontend_examples
    - CodeGeneratorAgent:generate_gcp_pipeline
    - CodeGeneratorAgent:generate_data_science
  input_distribution:
    type: split
    field: "sections"
  output_aggregation:
    type: merge
    strategy: "combine_content"
  next: standardize_code

- step_id: standardize_code
  type: partner_feedback_loop
  description: "Standardize and optimize code across all sections"
  agents:
    creator: CodifierAgent
    reviewer: InspectorAgent
  operations:
    - role: creator
      name: "standardize_code"
    - role: reviewer
      name: "review_code_standards"
    - role: creator
      name: "apply_code_improvements"
  iterations: 2
  next: develop_tests

- step_id: develop_tests
  type: standard
  description: "Develop comprehensive test suite for the portfolio"
  agent: TestEngineerAgent
  operation: "develop_test_suite"
  tools:
    - code_execution
    - github_tool
  next: run_tests

- step_id: run_tests
  type: process
  description: "Run tests with validation and error handling"
  agent: TestEngineerAgent
  input:
    source: "test_suite"
  process:
    - operation: "run_unit_tests"
      condition: "unit_tests_passed == true"
      failure_action: "log_and_fix"
    - operation: "run_integration_tests"
      condition: "integration_tests_passed == true"
      failure_action: "log_and_fix" 
    - operation: "run_e2e_tests"
      condition: "e2e_tests_passed == true"
      failure_action: "log_and_fix"
  output:
    destination: "test_results"
  next: user_acceptance_testing

- step_id: user_acceptance_testing
  type: standard
  description: "Perform user acceptance testing"
  agent: UATAgent
  operation: "perform_uat"
  tools:
    - browser_tools
    - memory
  next: final_review

- step_id: final_review
  type: partner_feedback_loop
  description: "Final review and polish of the entire portfolio"
  agents:
    creator: CodifierAgent
    reviewer: InspectorAgent
  operations:
    - role: creator
      name: "final_polish"
    - role: reviewer
      name: "comprehensive_review"
    - role: creator
      name: "apply_final_fixes"
  iterations: 1
  next: deploy

- step_id: deploy
  type: handoff
  description: "Deploy portfolio to GitHub Pages with specialist handling"
  primary_agent: GithubJourneyAgent
  operation: "prepare_deployment"
  handoff_conditions:
    - condition: "needs_ci_cd_setup == true"
      target_agent: CodeGeneratorAgent
      operation: "setup_ci_cd"
    - condition: "needs_domain_config == true"
      target_agent: UXDesignerAgent
      operation: "configure_custom_domain"
  completion_action: "deploy_to_github_pages"
